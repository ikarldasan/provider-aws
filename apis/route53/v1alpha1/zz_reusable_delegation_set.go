/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// ReusableDelegationSetParameters defines the desired state of ReusableDelegationSet
type ReusableDelegationSetParameters struct {
	// Region is which region the ReusableDelegationSet will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`
	// A unique string that identifies the request, and that allows you to retry
	// failed CreateReusableDelegationSet requests without the risk of executing
	// the operation twice. You must use a unique CallerReference string every time
	// you submit a CreateReusableDelegationSet request. CallerReference can be
	// any unique string, for example a date/time stamp.
	// +kubebuilder:validation:Required
	CallerReference *string `json:"callerReference"`
	// If you want to mark the delegation set for an existing hosted zone as reusable,
	// the ID for that hosted zone.
	HostedZoneID                          *string `json:"hostedZoneID,omitempty"`
	CustomReusableDelegationSetParameters `json:",inline"`
}

// ReusableDelegationSetSpec defines the desired state of ReusableDelegationSet
type ReusableDelegationSetSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       ReusableDelegationSetParameters `json:"forProvider"`
}

// ReusableDelegationSetObservation defines the observed state of ReusableDelegationSet
type ReusableDelegationSetObservation struct {
	// A complex type that contains name server information.
	DelegationSet *DelegationSet `json:"delegationSet,omitempty"`
	// The unique URL representing the new reusable delegation set.
	Location *string `json:"location,omitempty"`
}

// ReusableDelegationSetStatus defines the observed state of ReusableDelegationSet.
type ReusableDelegationSetStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          ReusableDelegationSetObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ReusableDelegationSet is the Schema for the ReusableDelegationSets API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type ReusableDelegationSet struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ReusableDelegationSetSpec   `json:"spec"`
	Status            ReusableDelegationSetStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ReusableDelegationSetList contains a list of ReusableDelegationSets
type ReusableDelegationSetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ReusableDelegationSet `json:"items"`
}

// Repository type metadata.
var (
	ReusableDelegationSetKind             = "ReusableDelegationSet"
	ReusableDelegationSetGroupKind        = schema.GroupKind{Group: Group, Kind: ReusableDelegationSetKind}.String()
	ReusableDelegationSetKindAPIVersion   = ReusableDelegationSetKind + "." + GroupVersion.String()
	ReusableDelegationSetGroupVersionKind = GroupVersion.WithKind(ReusableDelegationSetKind)
)

func init() {
	SchemeBuilder.Register(&ReusableDelegationSet{}, &ReusableDelegationSetList{})
}
